#!/usr/bin/python

"""
Peak Calling for ChIP-seq or Break-seq analysis

Requirements for this experiment - If HOMER is used for peak calling, a SAM file must be in a folder labeled
'BWA_BAM_files' under the project folder. If MACS2 is used for peak calling, a sorted BAM file must be in a folder
labeled 'BWA_BAM_files' under the project folder.

HOMER will take a SAM file and genereate a list of peak in a txt file format. MACS2 will generate 4 peak files from a
sorted BAM file, including an Excel (.xls) file with peaks.
"""

import os
import subprocess

species = 'human'
read_length = 75
sample_suffix = 'fastq'  # Valid options for sequencing data are usually 'fasta', 'fastq', or 'fa'
compression_suffix = 'gz'  # Usually 'gz' or 'zip'
read_type = 'SE'  # Valid options are 'SE' (single-end) or 'PE' (paired-end)
pc = 'lisa'
experiment_name = 'E76_RPA_ChIP-seq'
peak_calling_software = 'macs2'  # Valid options are 'macs2' or 'homer'

if peak_calling_software == 'macs2':
    q_value_cutoff = '0.01'  # Default is 0.01, use 0.05 for broad peaks
    duplication_choice = 'all'  # Valid options are 'auto' to have macs2 determine the max number of reads possible at one site, 'all' to keep all tags at the same location, or an integer value selected by the user
    peak_type = 'normal'  # Valid choices are 'broad' or 'normal'

elif peak_calling_software == 'homer':
    peak_style = 'factor'  # Valid options are 'factor' for most ChIP-seq experiments or 'histone' for broad regions of enrichment or histone marks,

if species == 'human':
    genome_size = '2.7e9'
elif species == 'mouse':
    genome_size = '1.87e9'
else:
    print('Invalid species choice.')
    quit()

if pc == 'cortez_mac':
    # experiment specific information
    output_directory = "/Users/temporary/projects/{}".format(experiment_name)
    fasta_directory = "/Users/temporary/projects/{}/fastq".format(experiment_name)

    n_cpus = 8  # Number of computer cores to use in parallel (speeds up program)

    # identifying path of programs
    homer = '/Users/temporary/Sources/homer/bin/'
    macs2 = '/Users/lisapoole/Sources/MACS2-2.1.1.20160309/macs2'


def macs2_peak_calling(sample_base, input_base):
    print("Begin calling peaks for {}".format())
    if not os.path.exists('{}/macs2_peaks'.format(output_directory)):
        os.mkdir('{}/peaks'.format(output_directory))  # Creates a folder for all peak analyses
    path_to_executable = '{} callpeak'.format(macs2)
    treatment_file = '-t {}/{}.sorted.bam'.format(output_directory, sample_base)
    input_file = '-c {}/{}.sorted.bam'.format(output_directory, input_base)
    input_format = '-f BAM'
    duplicates = '--keep-dup {}'.format(duplication_choice)
    genome = '-g {}'.format(genome_size)  # Genome size per species is pre-determined by MACS2 software
    naming = '-n {}'.format(sample_base)  # Indicates the base of all files generated by MACS2
    output_dir = '--outdir {}/macs2_peaks'.format(output_directory)  # Indicates the location of all output files
    enrichment = '--qvalue {}'.format(q_value_cutoff)
    if peak_type == 'broad':
        peak_indicator = '--broad'
    elif peak_type == 'normal':
        peak_indicator = ''
    else:
        print('Invalid peak_type choice.')
        quit()

    command = [path_to_executable, treatment_file, input_file, input_format, duplicates, enrichment, genome, naming,
               peak_indicator, output_dir]
    call_code = ' '.join(command)
    print(call_code)
    process = subprocess.Popen([call_code], shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print output.strip()
        rc = process.poll()
    print("Done calling peaks for {}".format(sample_base))


def homer_tag_directory(sample_base):
    #  Creates Tag Directory for Homer Peak Calling
    print("Start making Tag directory for {}".format(sample_base))
    if not os.path.exists('{}/homer_peaks'.format(output_directory)):
        os.mkdir('{}/homer_peaks'.format(output_directory))

    path_to_executable = '{}'.format(homer)
    homer_program = 'makeTagDirectory'
    tag_directory = '{}/homer_peaks/{}'.format(output_directory, sample_base)
    input_file = '{}/BWA_BAM_files/{}.sam'.format(output_directory, sample_base)
    important_options = '-format sam'
    command = [path_to_executable, homer_program, tag_directory, input_file, important_options]
    call_code = ' '.join(command)
    print(call_code)
    process = subprocess.Popen([call_code], shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print output.strip()
        rc = process.poll()
    print("Done making Tag directory for {}".format(sample_base))


def homer_peak_calling(sample_base, peak_style):
    path_to_executable = '{}'.format(homer)
    homer_program = 'findPeaks'
    tag_directory = '{}/homer_peaks/{}'.format(output_directory, sample_base)
    genome = '-gsize {}'.format(genome_size)
    if peak_style == 'factor':
        options = '-style {}'.format(peak_style)
    elif peak_style == 'histone':
        options = '-style {} -region'.format(peak_style)
    else:
        print('peak_style choice is invalid')
        quit()
    important_options = '-o {}/homer/{0}/{0}_peaks.txt'.format(output_directory, sample_base)
    command = [path_to_executable, homer_program, tag_directory, genome, options, important_options]
    call_code = ' '.join(command)
    print(call_code)
    process = subprocess.Popen([call_code], shell=True,
                               stdout=subprocess.PIPE,
                               stderr=subprocess.STDOUT)
    while True:
        output = process.stdout.readline()
        if output == '' and process.poll() is not None:
            break
        if output:
            print output.strip()
        rc = process.poll()
    print("Done making Tag directory for {}".format(sample_base))


def homer_peak_calling(sample_base):
    homer_tag_directory(sample_base)
    homer_peak_calling(sample_base)


if peak_calling_software == 'macs2':
    macs2_peak_calling()
elif peak_calling_software == 'homer':
    homer_peak_calling()
else:
    print('Invalid peak_calling_software selected.')
    quit()
